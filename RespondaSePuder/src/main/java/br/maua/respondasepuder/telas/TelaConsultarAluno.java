/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.maua.respondasepuder.telas;
import br.maua.respondasepuder.modelo.Usuario;
import br.maua.respondasepuder.persistencia.UsuarioDAO;
import java.awt.event.MouseEvent;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.ListSelectionModel;
/**
 *
 * @author Arthur
 */
public class TelaConsultarAluno extends javax.swing.JFrame {

    /**
     * Creates new form TelaAdicionarAluno
     */
    private DefaultTableModel modeloTabela;
    
    public TelaConsultarAluno() {
        super("Responda se puder");
        initComponents();
        setLocationRelativeTo(null);  
        configurarTabela();
        carregarUsuarios();
    }
    //Configura a JTable
    private void configurarTabela() {
        //Define os nomes das colunas da tabela
        String[] colunas = {"ID", "Nome", "Email", "Senha"};
        //Constrói um objeto e passa como argumentos as colunas e o número de linhas.
        modeloTabela = new DefaultTableModel(colunas, 0);
        //Define o modelo da tabela "consultarAlunosTable" como "modeloTabela".
        consultarAlunosTable.setModel(modeloTabela);
        //Define o tamanho das linhas para 25 pixels.
        consultarAlunosTable.setRowHeight(25);
        //Permite a seleção de uma linha por vez.
        consultarAlunosTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        //Não permite que o usuário reordene as colunas da tabela.
        consultarAlunosTable.getTableHeader().setReorderingAllowed(false);
    }
    //Método para carregar os usuários na tabela.
    public void carregarUsuarios() {
        //remove as linhas da tabela mantendo as colunas.
        modeloTabela.setRowCount(0);
        try {
            // Instancia um objeto do tipo UsuarioDAO.
            var dao = new UsuarioDAO();
            //Chama o método consultarUsuario, passando como parâmetro um campo de texto
            //e retorna para um array de objetos (usuarios).
            List <Usuario> usuarios = dao.consultarUsuario(pesquisarAlunoTextField.getText());
            //Utiliza o for-each para que a cada usuario em usuarios, o loop seja executado.
            for (Usuario usuario : usuarios) {
                //Utiliza os atributos de usuario para adicionar ao array de objetos linha
                Object[] linha = {
                    usuario.getIdentificador(),
                    usuario.getNome(),
                    usuario.getEmail(),
                    usuario.getSenha(),
                };
                //adiciona a linha na tabela
                modeloTabela.addRow(linha);
            }
        }
        catch (Exception e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao adicionar usuários");
        }
    }
    public Usuario getUsuarioSelecionado() {
        // Esse método retorna o índice da primeira coluna selecionada.
        int linha = consultarAlunosTable.getSelectedRow();
        // Retorna -1 se a linha estiver selecionada.
        if (linha != -1){
            try {
                //Acessa os valores da linha selecionada.
                int id = (int) modeloTabela.getValueAt(linha, 0);
                String nome = (String) modeloTabela.getValueAt(linha, 1);
                String email = (String) modeloTabela.getValueAt(linha, 2);
                String senha = (String) modeloTabela.getValueAt(linha, 3);
                //Retorna um objeto do tipo Usuario
                return Usuario.builder()
                        .identificador(id)
                        .nome(nome)
                        .email(email)
                        .senha(senha)
                        .build();
            }
            catch(Exception e) {
                e.printStackTrace();
                return null;
            }
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        emailAlunoTextField = new javax.swing.JTextField();
        senhaAlunoTextField = new javax.swing.JTextField();
        nomeAlunoTextField = new javax.swing.JTextField();
        voltarConsultarAlunoButton = new javax.swing.JButton();
        removerAlunoButton = new javax.swing.JButton();
        adicionarAlunoButton1 = new javax.swing.JButton();
        atualizarAlunoButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        consultarAlunosTable = new javax.swing.JTable();
        pesquisarAlunoTextField = new javax.swing.JTextField();
        imageLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        emailAlunoTextField.setBackground(new java.awt.Color(0, 176, 185));
        emailAlunoTextField.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        emailAlunoTextField.setBorder(null);
        getContentPane().add(emailAlunoTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 390, 320, 60));

        senhaAlunoTextField.setBackground(new java.awt.Color(0, 176, 185));
        senhaAlunoTextField.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        senhaAlunoTextField.setBorder(null);
        senhaAlunoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senhaAlunoTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(senhaAlunoTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 560, 320, 60));

        nomeAlunoTextField.setBackground(new java.awt.Color(0, 176, 185));
        nomeAlunoTextField.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        nomeAlunoTextField.setBorder(null);
        nomeAlunoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomeAlunoTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(nomeAlunoTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 222, 320, 60));

        voltarConsultarAlunoButton.setText("jButton1");
        voltarConsultarAlunoButton.setContentAreaFilled(false);
        voltarConsultarAlunoButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        voltarConsultarAlunoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarConsultarAlunoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(voltarConsultarAlunoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 13, 130, 120));

        removerAlunoButton.setContentAreaFilled(false);
        removerAlunoButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        removerAlunoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerAlunoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(removerAlunoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 870, 370, 100));

        adicionarAlunoButton1.setContentAreaFilled(false);
        adicionarAlunoButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        adicionarAlunoButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                //adicionarAlunoButton1MouseClicked(evt);
            }
        });
        adicionarAlunoButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarAlunoButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(adicionarAlunoButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 700, 470, 100));

        atualizarAlunoButton1.setContentAreaFilled(false);
        atualizarAlunoButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        atualizarAlunoButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atualizarAlunoButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(atualizarAlunoButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1290, 870, 370, 100));

        consultarAlunosTable.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        consultarAlunosTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Email", "Senha"
            }
        ));
        consultarAlunosTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                consultarAlunosTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(consultarAlunosTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 160, 1050, 680));

        pesquisarAlunoTextField.setBackground(new java.awt.Color(242, 92, 84));
        pesquisarAlunoTextField.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        pesquisarAlunoTextField.setBorder(null);
        pesquisarAlunoTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pesquisarAlunoTextFieldActionPerformed(evt);
            }
        });
        getContentPane().add(pesquisarAlunoTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 80, 890, 40));

        imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Tela consultar aluno .png"))); // NOI18N
        getContentPane().add(imageLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -50, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removerAlunoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerAlunoButtonActionPerformed
        //Inicializa as variáveis com os valores dos campos de texto correspondentes.
        var nome = nomeAlunoTextField.getText();
        var email = emailAlunoTextField.getText();
        var senha = senhaAlunoTextField.getText();
        //Instancia um objeto do tipo Usuario com o valor das variáveis.
        var usuario = Usuario.builder()
                .nome(nome)
                .email(email)
                .senha(senha)
                .build();
        //Instancia um objeto do tipo UsuarioDAO.
        var dao = new UsuarioDAO();
        try {
            //chama o método removerUsuario passando usuario como parâmetro
            if (dao.removerUsuario(usuario)) {
                JOptionPane.showMessageDialog(null, "Aluno removido com sucesso.");
                //Chama o método carregarUsuarios para atualizar a tabela.
                carregarUsuarios();
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(
                null, "Erro ao remover aluno"
            );
        }
    }//GEN-LAST:event_removerAlunoButtonActionPerformed
    //Método é chamado com o botão de atulizar é apertado
    private void atualizarAlunoButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atualizarAlunoButton1ActionPerformed
        //Verifica se a tabela está sendo editada: retorna true ou false
        if(consultarAlunosTable.isEditing()){
            //Para a edição feita na tabela
            consultarAlunosTable.getCellEditor().stopCellEditing();
        }
        // Obtém o modelo da tabela como DefaultTableModel para poder utilizar o seus métodos.
        DefaultTableModel model = (DefaultTableModel) consultarAlunosTable.getModel();
        //Instancia um objeto do tipo UsuarioDAO.
        var dao = new UsuarioDAO();
        //Realiza a conversão de tipo e inicializa as respectivas variáveis:
        var linha = (Integer) consultarAlunosTable.getSelectedRow();
        var identificador = (Integer) consultarAlunosTable.getValueAt(linha, 0);
        var nome = (String) consultarAlunosTable.getValueAt(linha, 1);
        var email = (String) consultarAlunosTable.getValueAt(linha, 2);
        var senha = (String) consultarAlunosTable.getValueAt(linha, 3);
        try {
            //Chama o método atualizarUsuario passando como parâmetro o nome, emeail e senha
            dao.atualizarUsuario(identificador, nome, email, senha);
            JOptionPane.showMessageDialog(null, "Aluno atualizado com sucesso.");
            carregarUsuarios();
        } catch (Exception ex) {
            Logger.getLogger(TelaConsultarAluno.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_atualizarAlunoButton1ActionPerformed

    private void senhaAlunoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senhaAlunoTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_senhaAlunoTextFieldActionPerformed
    // Esse método é chamado quando o usuário aperta a tecla "Enter":
    private void pesquisarAlunoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pesquisarAlunoTextFieldActionPerformed
        // TODO add your handling code here:
        try {
            carregarUsuarios();
        } catch (Exception ex) {
            //Logger.getLogger(TelaConsultarAluno.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pesquisarAlunoTextFieldActionPerformed

    private void voltarConsultarAlunoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarConsultarAlunoButtonActionPerformed
        this.dispose();
        new TelaDeADM().setVisible(true);
    }//GEN-LAST:event_voltarConsultarAlunoButtonActionPerformed

    private void adicionarAlunoButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarAlunoButton1ActionPerformed
        //Inicializa as variáveis com os valores dos campos de texto correspondentes.
        var nome = nomeAlunoTextField.getText();
        var email = emailAlunoTextField.getText();
        var senha = senhaAlunoTextField.getText();
        //Instancia um objeto do tipo Usuario com o valor das variáveis.
        var usuario = Usuario.builder()
                .nome(nome)
                .email(email)
                .senha(senha)
                .build();
        //Instancia um objeto do tipo UsuarioDAO.
        var dao = new UsuarioDAO();
        try {
            // Chama o método adicionarUsuario passando usuario como parâmetro
            dao.adicionarUsuario(usuario, false);
            JOptionPane.showMessageDialog(null, "Aluno adicionado com sucesso.");
            // Chama o método carregarUsuarios
            carregarUsuarios();
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(
                null, "Erro ao adicionar aluno:" + ex.getMessage()
            );
        }
        
    }//GEN-LAST:event_adicionarAlunoButton1ActionPerformed

    private void nomeAlunoTextFieldActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        
        
        // TODO add your handling code here:
    }                                            
    //Esse método é chamado com a tabela é clicada
    private void consultarAlunosTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_consultarAlunosTableMouseClicked
        //Inicializa uma variável recebendo o retorno do método
        var usuarioSelecionado = getUsuarioSelecionado();
        //Se o retorno não for nulo, pega as informações do usuário e as exibi
        //no campos de texto respectivos.
        if (usuarioSelecionado != null) {
            nomeAlunoTextField.setText(usuarioSelecionado.getNome());
            emailAlunoTextField.setText(usuarioSelecionado.getEmail());
            senhaAlunoTextField.setText(usuarioSelecionado.getSenha());
        }
        //Caso seja nulo, não exibe nada nos campos de texto.
        else {
            nomeAlunoTextField.setText("");
            emailAlunoTextField.setText("");
            senhaAlunoTextField.setText("");
        }
    }//GEN-LAST:event_consultarAlunosTableMouseClicked

    private void pesquisarAlunoTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pesquisarAlunoTextFieldKeyReleased
      
    }//GEN-LAST:event_pesquisarAlunoTextFieldKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaConsultarAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaConsultarAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaConsultarAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaConsultarAluno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new TelaConsultarAluno().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(TelaConsultarAluno.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarAlunoButton1;
    private javax.swing.JButton atualizarAlunoButton1;
    private javax.swing.JTable consultarAlunosTable;
    private javax.swing.JTextField emailAlunoTextField;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nomeAlunoTextField;
    private javax.swing.JTextField pesquisarAlunoTextField;
    private javax.swing.JButton removerAlunoButton;
    private javax.swing.JTextField senhaAlunoTextField;
    private javax.swing.JButton voltarConsultarAlunoButton;
    // End of variables declaration//GEN-END:variables
}
